/**
 * @fileoverview PDF Report Validation Schemas
 * Zod validation schemas for PDF report generation requests and responses
 *
 * @author Air Niugini Development Team
 * @version 1.0.0
 * @since 2025-09-27
 */

import { z } from 'zod'

// =============================================================================
// BASE VALIDATION SCHEMAS
// =============================================================================

/**
 * PDF Report Type validation
 */
export const PDFReportTypeSchema = z.enum([
  'fleet-compliance',
  'risk-assessment',
  'pilot-summary',
  'pilot-individual',
  'fleet-management',
  'captain-qualifications',
  'leave-analysis',
  'operational-readiness',
  'fleet-statistics',
  'certification-forecast'
])

/**
 * PDF Report Options validation
 */
export const PDFReportOptionsSchema = z.object({
  includeCharts: z.boolean().optional(),
  includeDetails: z.boolean().optional(),
  includeRecommendations: z.boolean().optional(),
  filterByRole: z.enum(['Captain', 'First Officer', 'all']).optional(),
  filterByStatus: z.enum(['active', 'inactive', 'all']).optional(),
  dateRange: z.object({
    from: z.string().datetime(),
    to: z.string().datetime()
  }).optional()
}).optional()

/**
 * PDF Generation Request validation
 */
export const PDFGenerationRequestSchema = z.object({
  reportType: PDFReportTypeSchema,
  pilotId: z.string().uuid().optional(),
  generatedBy: z.string().min(1, 'Generated by is required'),
  options: PDFReportOptionsSchema
})

/**
 * PDF Metadata validation
 */
export const PDFReportMetadataSchema = z.object({
  reportType: z.string(),
  title: z.string(),
  subtitle: z.string().optional(),
  generatedAt: z.string().datetime(),
  generatedBy: z.string(),
  reportPeriod: z.string().optional(),
  rosterPeriod: z.string().optional(),
  companyName: z.string(),
  fleetType: z.string(),
  pageCount: z.number().optional()
})

// =============================================================================
// COMPLIANCE REPORT VALIDATION
// =============================================================================

/**
 * Compliance Overview validation
 */
export const ComplianceOverviewSchema = z.object({
  totalPilots: z.number().int().min(0),
  totalCertifications: z.number().int().min(0),
  currentCertifications: z.number().int().min(0),
  expiringCertifications: z.number().int().min(0),
  expiredCertifications: z.number().int().min(0),
  complianceRate: z.number().min(0).max(100),
  lastUpdated: z.string().datetime()
})

/**
 * Expiration Breakdown validation
 */
export const ExpirationBreakdownSchema = z.object({
  next7Days: z.number().int().min(0),
  next14Days: z.number().int().min(0),
  next30Days: z.number().int().min(0),
  next60Days: z.number().int().min(0),
  next90Days: z.number().int().min(0),
  beyond90Days: z.number().int().min(0)
})

/**
 * Compliance by Category validation
 */
export const ComplianceByCategorySchema = z.object({
  category: z.string(),
  totalChecks: z.number().int().min(0),
  currentChecks: z.number().int().min(0),
  expiringChecks: z.number().int().min(0),
  expiredChecks: z.number().int().min(0),
  compliancePercentage: z.number().min(0).max(100)
})

/**
 * Pilot Compliance Status validation
 */
export const PilotComplianceStatusSchema = z.object({
  pilot: z.object({
    id: z.string().uuid(),
    employee_id: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    role: z.enum(['Captain', 'First Officer']),
    is_active: z.boolean()
  }),
  totalChecks: z.number().int().min(0),
  currentChecks: z.number().int().min(0),
  expiringChecks: z.number().int().min(0),
  expiredChecks: z.number().int().min(0),
  compliancePercentage: z.number().min(0).max(100),
  riskLevel: z.enum(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']),
  priorityActions: z.array(z.string())
})

/**
 * Complete Compliance Report Data validation
 */
export const ComplianceReportDataSchema = z.object({
  metadata: PDFReportMetadataSchema,
  overview: ComplianceOverviewSchema,
  expirationBreakdown: ExpirationBreakdownSchema,
  complianceByCategory: z.array(ComplianceByCategorySchema),
  pilotComplianceStatus: z.array(PilotComplianceStatusSchema),
  expiredCertifications: z.array(z.object({
    pilot: z.string(),
    employeeId: z.string(),
    checkType: z.string(),
    category: z.string(),
    expiryDate: z.string(),
    daysOverdue: z.number(),
    riskLevel: z.string()
  })),
  expiringCertifications: z.array(z.object({
    pilot: z.string(),
    employeeId: z.string(),
    checkType: z.string(),
    category: z.string(),
    expiryDate: z.string(),
    daysUntilExpiry: z.number(),
    urgencyLevel: z.string()
  })),
  recommendations: z.array(z.string())
})

// =============================================================================
// PILOT REPORT VALIDATION
// =============================================================================

/**
 * Pilot Summary validation
 */
export const PilotSummarySchema = z.object({
  pilot: z.object({
    id: z.string().uuid(),
    employee_id: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    role: z.enum(['Captain', 'First Officer']),
    date_of_birth: z.string().optional(),
    commencement_date: z.string().optional(),
    seniority_number: z.number().optional(),
    is_active: z.boolean()
  }),
  totalYearsService: z.number().min(0),
  currentAge: z.number().min(0),
  retirementDate: z.string().optional(),
  yearsToRetirement: z.number().optional(),
  totalCertifications: z.number().int().min(0),
  currentCertifications: z.number().int().min(0),
  expiringCertifications: z.number().int().min(0),
  expiredCertifications: z.number().int().min(0),
  captainQualifications: z.array(z.string()),
  lastTrainingDate: z.string().optional(),
  nextRequiredTraining: z.string().optional(),
  complianceStatus: z.enum(['COMPLIANT', 'AT_RISK', 'NON_COMPLIANT'])
})

/**
 * Training History Entry validation
 */
export const TrainingHistoryEntrySchema = z.object({
  checkType: z.string(),
  completedDate: z.string().optional(),
  expiryDate: z.string().optional(),
  status: z.enum(['CURRENT', 'EXPIRING', 'EXPIRED', 'NOT_COMPLETED']),
  daysUntilExpiry: z.number().optional(),
  instructor: z.string().optional(),
  location: z.string().optional(),
  notes: z.string().optional()
})

/**
 * Detailed Pilot Record validation
 */
export const DetailedPilotRecordSchema = z.object({
  pilot: z.object({
    id: z.string().uuid(),
    employee_id: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    middle_name: z.string().optional(),
    role: z.enum(['Captain', 'First Officer']),
    contract_type: z.string().optional(),
    nationality: z.string().optional(),
    date_of_birth: z.string().optional(),
    commencement_date: z.string().optional(),
    seniority_number: z.number().optional(),
    is_active: z.boolean(),
    captain_qualifications: z.array(z.string()).optional(),
    qualification_notes: z.string().optional(),
    rhs_captain_expiry: z.string().optional()
  }),
  summary: PilotSummarySchema,
  certificationHistory: z.array(TrainingHistoryEntrySchema),
  leaveHistory: z.array(z.object({
    requestType: z.string(),
    startDate: z.string(),
    endDate: z.string(),
    daysCount: z.number(),
    status: z.string(),
    rosterPeriod: z.string()
  })).optional(),
  performanceMetrics: z.object({
    onTimeComplianceRate: z.number().min(0).max(100),
    trainingCompletionRate: z.number().min(0).max(100),
    leaveUtilization: z.number().min(0)
  }).optional()
})

/**
 * Pilot Report Data validation
 */
export const PilotReportDataSchema = z.object({
  metadata: PDFReportMetadataSchema,
  reportScope: z.enum(['INDIVIDUAL', 'MULTIPLE', 'ALL']),
  pilots: z.array(DetailedPilotRecordSchema),
  summary: z.object({
    totalPilots: z.number().int().min(0),
    averageAge: z.number().min(0),
    averageServiceYears: z.number().min(0),
    complianceDistribution: z.object({
      compliant: z.number().int().min(0),
      atRisk: z.number().int().min(0),
      nonCompliant: z.number().int().min(0)
    })
  }),
  recommendations: z.array(z.string())
})

// =============================================================================
// FLEET MANAGEMENT VALIDATION
// =============================================================================

/**
 * Fleet Roster Analysis validation
 */
export const FleetRosterAnalysisSchema = z.object({
  totalPilots: z.number().int().min(0),
  activePilots: z.number().int().min(0),
  inactivePilots: z.number().int().min(0),
  captains: z.number().int().min(0),
  firstOfficers: z.number().int().min(0),
  contractTypes: z.object({
    fulltime: z.number().int().min(0),
    contract: z.number().int().min(0),
    casual: z.number().int().min(0)
  }),
  seniorityDistribution: z.array(z.object({
    range: z.string(),
    count: z.number().int().min(0)
  })),
  ageDistribution: z.array(z.object({
    range: z.string(),
    count: z.number().int().min(0)
  }))
})

/**
 * Captain Qualification validation
 */
export const CaptainQualificationSchema = z.object({
  pilot: z.object({
    id: z.string().uuid(),
    employee_id: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    role: z.enum(['Captain', 'First Officer'])
  }),
  lineCaptain: z.boolean(),
  trainingCaptain: z.boolean(),
  examiner: z.boolean(),
  instructor: z.boolean(),
  checkAirman: z.boolean(),
  rhsCaptainExpiry: z.string().optional(),
  qualificationNotes: z.string().optional(),
  totalQualifications: z.number().int().min(0)
})

/**
 * Leave Analysis validation
 */
export const LeaveAnalysisSchema = z.object({
  rosterPeriod: z.string(),
  totalRequests: z.number().int().min(0),
  approvedRequests: z.number().int().min(0),
  pendingRequests: z.number().int().min(0),
  rejectedRequests: z.number().int().min(0),
  totalLeaveDays: z.number().int().min(0),
  leaveByType: z.array(z.object({
    type: z.string(),
    count: z.number().int().min(0),
    totalDays: z.number().int().min(0)
  })),
  availabilityImpact: z.object({
    pilotsOnLeave: z.number().int().min(0),
    availabilityPercentage: z.number().min(0).max(100),
    criticalPeriods: z.array(z.string())
  })
})

/**
 * Operational Readiness validation
 */
export const OperationalReadinessSchema = z.object({
  overallAvailability: z.number().min(0).max(100),
  captainAvailability: z.number().min(0).max(100),
  firstOfficerAvailability: z.number().min(0).max(100),
  minimumCrewRequirement: z.object({
    captains: z.number().int().min(0),
    firstOfficers: z.number().int().min(0)
  }),
  currentCertifiedCrew: z.object({
    captains: z.number().int().min(0),
    firstOfficers: z.number().int().min(0)
  }),
  shortfall: z.object({
    captains: z.number().int().min(0),
    firstOfficers: z.number().int().min(0)
  }),
  riskAssessment: z.enum(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL']),
  mitigationActions: z.array(z.string())
})

/**
 * Fleet Management Report Data validation
 */
export const FleetManagementReportDataSchema = z.object({
  metadata: PDFReportMetadataSchema,
  rosterAnalysis: FleetRosterAnalysisSchema,
  captainQualifications: z.array(CaptainQualificationSchema),
  leaveAnalysis: LeaveAnalysisSchema,
  operationalReadiness: OperationalReadinessSchema,
  upcomingRetirements: z.array(z.object({
    pilot: z.object({
      id: z.string().uuid(),
      employee_id: z.string(),
      first_name: z.string(),
      last_name: z.string(),
      role: z.enum(['Captain', 'First Officer']),
      date_of_birth: z.string().optional()
    }),
    retirementDate: z.string(),
    yearsToRetirement: z.number().min(0),
    replacementPlan: z.string().optional()
  })),
  recommendations: z.array(z.string())
})

// =============================================================================
// VALIDATION FUNCTIONS
// =============================================================================

/**
 * Validate PDF generation request
 */
export function validatePDFRequest(data: unknown) {
  try {
    return PDFGenerationRequestSchema.parse(data)
  } catch (error) {
    throw new Error(`Invalid PDF request: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

/**
 * Validate compliance report data
 */
export function validateComplianceReportData(data: unknown) {
  try {
    return ComplianceReportDataSchema.parse(data)
  } catch (error) {
    throw new Error(`Invalid compliance report data: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

/**
 * Validate pilot report data
 */
export function validatePilotReportData(data: unknown) {
  try {
    return PilotReportDataSchema.parse(data)
  } catch (error) {
    throw new Error(`Invalid pilot report data: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

/**
 * Validate fleet management report data
 */
export function validateFleetManagementReportData(data: unknown) {
  try {
    return FleetManagementReportDataSchema.parse(data)
  } catch (error) {
    throw new Error(`Invalid fleet management report data: ${error instanceof Error ? error.message : 'Unknown error'}`)
  }
}

/**
 * Validate report type
 */
export function validateReportType(reportType: unknown): string {
  try {
    return PDFReportTypeSchema.parse(reportType)
  } catch (error) {
    throw new Error(`Invalid report type: ${reportType}. Must be one of: ${PDFReportTypeSchema.options.join(', ')}`)
  }
}

/**
 * Validate UUID
 */
export function validateUUID(id: unknown): string {
  const uuidSchema = z.string().uuid()
  try {
    return uuidSchema.parse(id)
  } catch (error) {
    throw new Error(`Invalid UUID format: ${id}`)
  }
}

// =============================================================================
// All schemas are exported individually above as const exports
// =============================================================================