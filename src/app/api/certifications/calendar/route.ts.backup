import { NextRequest, NextResponse } from 'next/server';
import { getSupabaseAdmin } from '@/lib/supabase';
import { getCertificationStatus } from '@/lib/certification-utils';
import { logger } from '@/lib/logger';

export async function GET(request: NextRequest) {
  try {
    console.log('üîç API /certifications/calendar: Fetching certification calendar data');

    // Get all pilot certifications with expiry dates for calendar display
    const { data: certifications, error } = await getSupabaseAdmin()
      .from('pilot_checks')
      .select(
        `
        *,
        pilots!inner (
          employee_id,
          first_name,
          last_name
        ),
        check_types!inner (
          check_code,
          check_description
        )
      `
      )
      .not('expiry_date', 'is', null)
      .order('expiry_date', { ascending: true });

    if (error) {
      console.error('üö® API /certifications/calendar: Database error:', error);
      return NextResponse.json({ success: false, error: error.message }, { status: 500 });
    }

    console.log(
      'üîç API /certifications/calendar: Found',
      certifications?.length || 0,
      'certifications with expiry dates'
    );

    // Transform data for calendar display
    const result = (certifications || []).map((cert: any) => ({
      pilot_name: `${cert.pilots.first_name} ${cert.pilots.last_name}`,
      employee_id: cert.pilots.employee_id,
      check_code: cert.check_types.check_code,
      check_description: cert.check_types.check_description,
      expiry_date: cert.expiry_date,
      status: getCertificationStatus(cert.expiry_date ? new Date(cert.expiry_date) : null),
    }));

    console.log(
      'üîç API /certifications/calendar: Returning',
      result.length,
      'certification calendar items'
    );

    return NextResponse.json({
      success: true,
      data: result,
    });
  } catch (error) {
    console.error('üö® API /certifications/calendar: Fatal error:', error);
    return NextResponse.json({ success: false, error: 'Internal server error' }, { status: 500 });
  }
}
