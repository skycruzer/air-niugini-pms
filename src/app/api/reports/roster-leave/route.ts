import { NextRequest, NextResponse } from 'next/server';
import { renderToBuffer } from '@react-pdf/renderer';
import { createElement } from 'react';
import { getLeaveRequestsByRosterPeriodAdmin } from '@/lib/leave-service';
import { getRosterPeriodFromDate, getFutureRosterPeriods } from '@/lib/roster-utils';
import { logger } from '@/lib/logger';
import {
  createRosterLeaveReportDocument,
  createRosterLeaveReportData,
  generateRosterLeaveReportFilename,
} from '@/lib/pdf-roster-leave-report';

/**
 * Generate and download Roster Planning PDF Report
 */
export async function POST(request: NextRequest) {
  try {
    logger.debug('ðŸŽ¯ Starting roster planning PDF report generation...');

    const body = await request.json();
    const { rosterPeriod, generatedBy } = body;

    // Validation
    if (!rosterPeriod) {
      return NextResponse.json(
        { success: false, error: 'Roster period is required' },
        { status: 400 }
      );
    }

    if (!generatedBy) {
      return NextResponse.json(
        { success: false, error: 'Generated by information is required' },
        { status: 400 }
      );
    }

    logger.debug(`ðŸ“Š Generating report for roster period: ${rosterPeriod}`);

    // Find the roster period details
    const futureRosters = getFutureRosterPeriods(12);
    const selectedRoster = futureRosters.find((r) => r.code === rosterPeriod);

    if (!selectedRoster) {
      return NextResponse.json(
        { success: false, error: 'Invalid roster period selected' },
        { status: 404 }
      );
    }

    // Fetch leave requests for the roster period
    logger.debug(`ðŸ“‹ Fetching leave requests for ${rosterPeriod}...`);
    const leaveRequests = await getLeaveRequestsByRosterPeriodAdmin(rosterPeriod);

    logger.debug(`âœ… Found ${leaveRequests.length} leave requests`);

    // Create report data
    const reportData = createRosterLeaveReportData(selectedRoster, leaveRequests, generatedBy);

    // Generate PDF
    logger.debug(' Generating roster planning PDF document...');
    const pdfBuffer = await renderToBuffer(createRosterLeaveReportDocument(reportData));

    logger.info(' Roster planning PDF generated successfully');

    // Generate filename
    const filename = generateRosterLeaveReportFilename(rosterPeriod);

    // Return PDF as downloadable file
    return new NextResponse(new Uint8Array(pdfBuffer), {
      status: 200,
      headers: {
        'Content-Type': 'application/pdf',
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Length': pdfBuffer.length.toString(),
        'Cache-Control': 'no-cache',
      },
    });
  } catch (error) {
    logger.error(' Error generating roster planning PDF report:', error);

    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Failed to generate PDF report',
      },
      { status: 500 }
    );
  }
}

/**
 * Get available roster periods for report generation
 */
export async function GET(request: NextRequest) {
  try {
    logger.debug('ðŸ“… Fetching available roster periods...');

    const url = new URL(request.url);
    const monthsAhead = parseInt(url.searchParams.get('months') || '12');

    const futureRosters = getFutureRosterPeriods(monthsAhead);

    // Format roster periods for dropdown display
    const rosterOptions = futureRosters.map((roster) => ({
      value: roster.code,
      label: `${roster.code}: ${roster.startDate.toLocaleDateString()} - ${roster.endDate.toLocaleDateString()}`,
      startDate: roster.startDate.toISOString(),
      endDate: roster.endDate.toISOString(),
      daysRemaining: roster.daysRemaining,
    }));

    return NextResponse.json({
      success: true,
      data: rosterOptions,
    });
  } catch (error) {
    logger.error(' Error fetching roster periods:', error);

    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : 'Failed to fetch roster periods',
      },
      { status: 500 }
    );
  }
}
