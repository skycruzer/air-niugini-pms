import { NextResponse } from 'next/server';
import { getSupabaseAdmin } from '@/lib/supabase';
import { getRosterPeriodFromDate } from '@/lib/roster-utils';
import { differenceInDays } from 'date-fns';
import { logger } from '@/lib/logger';

export async function GET() {
  try {
    console.log('üîç API /leave-requests: Fetching leave requests with OPTIMIZED JOIN query...');

    const supabaseAdmin = getSupabaseAdmin();

    // ‚ö° OPTIMIZED: Single query with JOIN to eliminate N+1 pattern
    const { data: requests, error } = await supabaseAdmin
      .from('leave_requests')
      .select(
        `
        *,
        pilots:pilot_id (
          first_name,
          middle_name,
          last_name,
          employee_id,
          role
        )
      `
      )
      .order('created_at', { ascending: false });

    if (error) {
      console.error('üö® API /leave-requests: Query error:', error);
      return NextResponse.json(
        { success: false, error: error.message || 'Failed to fetch leave requests' },
        { status: 500 }
      );
    }

    console.log('üîç API /leave-requests: Found', requests?.length || 0, 'leave requests');

    // ‚ö° OPTIMIZED: Transform data without additional queries
    const transformedRequests = (requests || []).map((request: any) => {
      const pilot = request.pilots;
      return {
        ...request,
        pilot_name: pilot
          ? `${pilot.first_name} ${pilot.middle_name ? pilot.middle_name + ' ' : ''}${pilot.last_name}`
          : 'Unknown Pilot',
        employee_id: pilot?.employee_id || 'N/A',
        pilot_role: pilot?.role || null,
        reviewer_name: null, // We'll get this separately if needed
        pilots: undefined, // Remove the nested object from response
      };
    });
    console.log(
      'üîç API /leave-requests: Sample request:',
      JSON.stringify(transformedRequests[0], null, 2)
    );

    return NextResponse.json({
      success: true,
      data: transformedRequests,
    });
  } catch (error) {
    console.error('üö® API /leave-requests: Fatal error:', error);
    return NextResponse.json({ success: false, error: 'Internal server error' }, { status: 500 });
  }
}

export async function POST(request: Request) {
  try {
    const requestData = await request.json();
    console.log('üìù API /leave-requests: Creating new leave request...', requestData);

    const supabaseAdmin = getSupabaseAdmin();

    // Calculate roster period and days
    const startDateRoster = getRosterPeriodFromDate(new Date(requestData.start_date));
    const daysCount =
      differenceInDays(new Date(requestData.end_date), new Date(requestData.start_date)) + 1;

    // Create the leave request
    const { data, error } = await supabaseAdmin
      .from('leave_requests')
      .insert([
        {
          pilot_id: requestData.pilot_id,
          request_type: requestData.request_type,
          roster_period: startDateRoster.code,
          start_date: requestData.start_date,
          end_date: requestData.end_date,
          days_count: daysCount,
          reason: requestData.reason,
          request_date: requestData.request_date,
          request_method: requestData.request_method,
          is_late_request: requestData.is_late_request || false,
          status: 'PENDING',
        },
      ])
      .select('*')
      .single();

    if (error) {
      console.error('üö® API /leave-requests: Error creating request:', error);
      return NextResponse.json({ success: false, error: error.message }, { status: 400 });
    }

    // Get pilot information for the created request
    const { data: pilot } = await supabaseAdmin
      .from('pilots')
      .select('first_name, middle_name, last_name, employee_id, role')
      .eq('id', data.pilot_id)
      .single();

    const responseData = {
      ...data,
      pilot_name: pilot
        ? `${pilot.first_name} ${pilot.middle_name ? pilot.middle_name + ' ' : ''}${pilot.last_name}`
        : 'Unknown Pilot',
      employee_id: pilot?.employee_id || 'N/A',
      pilot_role: pilot?.role || null,
      reviewer_name: null,
    };

    console.log('‚úÖ API /leave-requests: Created leave request:', responseData.id);

    return NextResponse.json({
      success: true,
      data: responseData,
    });
  } catch (error) {
    console.error('üö® API /leave-requests: Fatal error creating request:', error);
    return NextResponse.json({ success: false, error: 'Internal server error' }, { status: 500 });
  }
}

export async function PUT(request: Request) {
  try {
    const requestData = await request.json();
    console.log('üîÑ API /leave-requests: Updating leave request status...', requestData);

    const supabaseAdmin = getSupabaseAdmin();
    const { id, status, reviewer_comments } = requestData;

    if (!id) {
      return NextResponse.json(
        { success: false, error: 'Leave request ID is required' },
        { status: 400 }
      );
    }

    if (!['APPROVED', 'DENIED'].includes(status)) {
      return NextResponse.json(
        { success: false, error: 'Invalid status. Must be APPROVED or DENIED' },
        { status: 400 }
      );
    }

    // Update the leave request status
    const { data, error } = await supabaseAdmin
      .from('leave_requests')
      .update({
        status,
        reviewer_comments,
        reviewed_at: new Date().toISOString(),
      })
      .eq('id', id)
      .select(
        `
        *,
        pilots:pilot_id (
          first_name,
          middle_name,
          last_name,
          employee_id,
          role
        )
      `
      )
      .single();

    if (error) {
      console.error('üö® API /leave-requests: Error updating request:', error);
      return NextResponse.json({ success: false, error: error.message }, { status: 400 });
    }

    // Transform the response data
    const pilot = data.pilots;
    const responseData = {
      ...data,
      pilot_name: pilot
        ? `${pilot.first_name} ${pilot.middle_name ? pilot.middle_name + ' ' : ''}${pilot.last_name}`
        : 'Unknown Pilot',
      employee_id: pilot?.employee_id || 'N/A',
      pilot_role: pilot?.role || null,
      reviewer_name: null,
      pilots: undefined, // Remove the nested object from response
    };

    console.log(`‚úÖ API /leave-requests: ${status} leave request:`, responseData.id);

    return NextResponse.json({
      success: true,
      data: responseData,
    });
  } catch (error) {
    console.error('üö® API /leave-requests: Fatal error updating request:', error);
    return NextResponse.json({ success: false, error: 'Internal server error' }, { status: 500 });
  }
}

export async function PATCH(request: Request) {
  try {
    const requestData = await request.json();
    console.log('‚úèÔ∏è API /leave-requests PATCH: Updating leave request data...', requestData);

    const supabaseAdmin = getSupabaseAdmin();
    const { id, ...updateData } = requestData;

    if (!id) {
      return NextResponse.json(
        { success: false, error: 'Leave request ID is required' },
        { status: 400 }
      );
    }

    // Calculate roster period and days if dates are provided
    let updates: any = { ...updateData };

    if (updateData.start_date) {
      const startDateRoster = getRosterPeriodFromDate(new Date(updateData.start_date));
      updates.roster_period = startDateRoster.code;
    }

    if (updateData.start_date && updateData.end_date) {
      const daysCount =
        differenceInDays(new Date(updateData.end_date), new Date(updateData.start_date)) + 1;
      updates.days_count = daysCount;
    }

    // Update the leave request data
    const { data, error } = await supabaseAdmin
      .from('leave_requests')
      .update(updates)
      .eq('id', id)
      .select(
        `
        *,
        pilots:pilot_id (
          first_name,
          middle_name,
          last_name,
          employee_id,
          role
        )
      `
      )
      .single();

    if (error) {
      console.error('üö® API /leave-requests PATCH: Error updating request:', error);
      return NextResponse.json({ success: false, error: error.message }, { status: 400 });
    }

    // Transform the response data
    const pilot = data.pilots;
    const responseData = {
      ...data,
      pilot_name: pilot
        ? `${pilot.first_name} ${pilot.middle_name ? pilot.middle_name + ' ' : ''}${pilot.last_name}`
        : 'Unknown Pilot',
      employee_id: pilot?.employee_id || 'N/A',
      pilot_role: pilot?.role || null,
      reviewer_name: null,
      pilots: undefined, // Remove the nested object from response
    };

    console.log('‚úÖ API /leave-requests PATCH: Updated leave request:', responseData.id);

    return NextResponse.json({
      success: true,
      data: responseData,
    });
  } catch (error) {
    console.error('üö® API /leave-requests PATCH: Fatal error updating request:', error);
    return NextResponse.json({ success: false, error: 'Internal server error' }, { status: 500 });
  }
}

export const dynamic = 'force-dynamic';
