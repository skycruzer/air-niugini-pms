'use client'

import { useState, useEffect } from 'react'
import { format, startOfYear, endOfYear, eachMonthOfInterval, eachDayOfInterval, startOfMonth, endOfMonth, isToday, isSameMonth, addDays, subDays, differenceInDays } from 'date-fns'
import { getAllLeaveRequests, getLeaveRequestsByRosterPeriod, updateLeaveRequest, type LeaveRequest } from '@/lib/leave-service'
import { getAllPilots } from '@/lib/pilot-service'
import { getCurrentRosterPeriod } from '@/lib/roster-utils'

interface PilotOption {
  id: string
  employee_id: string
  first_name: string
  middle_name?: string
  last_name: string
  full_name: string
}

interface CalendarDay {
  date: Date
  isCurrentMonth: boolean
  isToday: boolean
  leaveRequests: LeaveRequest[]
}

export function LeaveCalendarView() {
  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear())
  const [selectedPilot, setSelectedPilot] = useState<string>('all')
  const [pilots, setPilots] = useState<PilotOption[]>([])
  const [leaveRequests, setLeaveRequests] = useState<LeaveRequest[]>([])
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [view, setView] = useState<'year' | 'quarter'>('year')
  const [editingRequest, setEditingRequest] = useState<LeaveRequest | null>(null)
  const [showEditModal, setShowEditModal] = useState(false)

  const currentRoster = getCurrentRosterPeriod()

  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true)

        const [pilotsData, requestsData] = await Promise.all([
          getAllPilots(),
          getAllLeaveRequests()
        ])

        const pilotOptions: PilotOption[] = pilotsData
          .filter(p => p.is_active)
          .map(pilot => ({
            id: pilot.id,
            employee_id: pilot.employee_id,
            first_name: pilot.first_name,
            middle_name: pilot.middle_name,
            last_name: pilot.last_name,
            full_name: `${pilot.first_name} ${pilot.middle_name ? pilot.middle_name + ' ' : ''}${pilot.last_name}`
          }))

        setPilots(pilotOptions)
        setLeaveRequests(requestsData)
      } catch (error) {
        console.error('Error loading calendar data:', error)
      } finally {
        setLoading(false)
      }
    }

    loadData()
  }, [])

  const handleEditRequest = (request: LeaveRequest) => {
    setEditingRequest(request)
    setShowEditModal(true)
  }

  const handleSaveEdit = async (updatedData: Partial<LeaveRequest>) => {
    if (!editingRequest) return

    try {
      setSaving(true)

      // Prepare the data for the API call
      const updateData = {
        pilot_id: updatedData.pilot_id,
        request_type: updatedData.request_type,
        start_date: updatedData.start_date,
        end_date: updatedData.end_date,
        reason: updatedData.reason,
        request_date: updatedData.request_date,
        request_method: updatedData.request_method
      }

      // Call the backend API to update the request
      const updatedRequest = await updateLeaveRequest(editingRequest.id, updateData)

      // Update the local state with the returned data
      setLeaveRequests(prev => prev.map(req =>
        req.id === editingRequest.id
          ? updatedRequest
          : req
      ))

      setShowEditModal(false)
      setEditingRequest(null)
    } catch (error) {
      console.error('Error updating leave request:', error)
      alert('Failed to update leave request. Please try again.')
    } finally {
      setSaving(false)
    }
  }

  const handleCloseEdit = () => {
    setShowEditModal(false)
    setEditingRequest(null)
  }

  const getLeaveTypeColor = (type: string, status: string) => {
    const opacity = status === 'APPROVED' ? '' : status === 'PENDING' ? 'opacity-75' : 'opacity-50'

    const baseColor = (() => {
      switch (type) {
        case 'RDO':
          return 'bg-blue-500'
        case 'SDO':
          return 'bg-green-500'
        case 'ANNUAL':
          return 'bg-purple-500'
        case 'SICK':
          return 'bg-red-500'
        case 'LSL':
          return 'bg-orange-500'
        case 'LWOP':
          return 'bg-gray-600'
        default:
          return 'bg-gray-500'
      }
    })()

    return `${baseColor} ${opacity}`
  }

  const getLeaveTypeAbbr = (type: string) => {
    switch (type) {
      case 'RDO':
        return 'RDO'
      case 'SDO':
        return 'SDO'
      case 'ANNUAL':
        return 'ANN'
      case 'SICK':
        return 'SCK'
      case 'LSL':
        return 'LSL'
      case 'LWOP':
        return 'LWOP'
      default:
        return '???'
    }
  }

  const filteredRequests = leaveRequests.filter(request => {
    const requestDate = new Date(request.start_date)
    const isInYear = requestDate.getFullYear() === selectedYear
    const pilotMatch = selectedPilot === 'all' || request.pilot_id === selectedPilot

    return isInYear && pilotMatch
  })

  const getRequestsForDate = (date: Date): LeaveRequest[] => {
    return filteredRequests.filter(request => {
      const startDate = new Date(request.start_date)
      const endDate = new Date(request.end_date)

      return date >= startDate && date <= endDate
    })
  }

  const generateCalendarDays = (month: Date): CalendarDay[] => {
    const monthStart = startOfMonth(month)
    const monthEnd = endOfMonth(month)

    // Get all days in the month
    const daysInMonth = eachDayOfInterval({ start: monthStart, end: monthEnd })

    // Add previous month days to fill the first week
    const startDay = monthStart.getDay()
    const prevMonthDays = startDay > 0
      ? eachDayOfInterval({
          start: subDays(monthStart, startDay),
          end: subDays(monthStart, 1)
        })
      : []

    // Add next month days to fill the last week
    const endDay = monthEnd.getDay()
    const nextMonthDays = endDay < 6
      ? eachDayOfInterval({
          start: addDays(monthEnd, 1),
          end: addDays(monthEnd, 6 - endDay)
        })
      : []

    const allDays = [...prevMonthDays, ...daysInMonth, ...nextMonthDays]

    return allDays.map(date => ({
      date,
      isCurrentMonth: isSameMonth(date, month),
      isToday: isToday(date),
      leaveRequests: getRequestsForDate(date)
    }))
  }

  const getPilotInitials = (pilotName: string | undefined): string => {
    if (!pilotName) return '??'
    const names = pilotName.split(' ')
    if (names.length >= 2) {
      return `${names[0][0]}${names[names.length - 1][0]}`.toUpperCase()
    }
    return names[0].substring(0, 2).toUpperCase()
  }

  const getRequestMethodDisplay = (method: string | undefined): string => {
    switch (method) {
      case 'EMAIL':
        return '📧 Email'
      case 'ORACLE':
        return '🖥️ Oracle System'
      case 'LEAVE_BIDS':
        return '📋 Leave Bids'
      case 'SYSTEM':
        return '💻 System'
      default:
        return '❓ Unknown'
    }
  }

  const renderMonthView = (month: Date) => {
    const days = generateCalendarDays(month)
    const weekDays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']

    return (
      <div key={format(month, 'yyyy-MM')} className="bg-white rounded-lg border border-gray-200 overflow-hidden">
        <div className="bg-[#E4002B] text-white px-4 py-3">
          <h3 className="font-semibold text-center">{format(month, 'MMMM yyyy')}</h3>
        </div>

        {/* Week day headers */}
        <div className="grid grid-cols-7 bg-gray-50">
          {weekDays.map(day => (
            <div key={day} className="px-1 py-2 text-xs font-medium text-gray-600 text-center border-r border-gray-200 last:border-r-0">
              {day}
            </div>
          ))}
        </div>

        {/* Calendar days */}
        <div className="grid grid-cols-7">
          {days.map((day, index) => {
            const leaveTooltip = day.leaveRequests.length > 0 ? (
              `${format(day.date, 'EEEE, MMMM d, yyyy')}\n\n` +
              day.leaveRequests.map(req => {
                const statusBadge = req.status === 'APPROVED' ? '✅ APPROVED' :
                                   req.status === 'PENDING' ? '⏳ PENDING' :
                                   '❌ DENIED'
                const employeeId = req.employee_id ? ` (${req.employee_id})` : ''
                const reviewer = req.reviewer_name ? `\n  Reviewed by: ${req.reviewer_name}` : ''
                const reviewDate = req.reviewed_at ? `\n  Review date: ${format(new Date(req.reviewed_at), 'MMM d, yyyy')}` : ''
                const comments = req.review_comments ? `\n  Comments: ${req.review_comments}` : ''
                const requestDate = req.request_date ? `\n📋 Request Date: ${format(new Date(req.request_date), 'EEE, MMM d, yyyy')}` : ''
                const requestMethod = req.request_method ? `\n📞 Request Method: ${getRequestMethodDisplay(req.request_method)}` : ''

                return `━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n` +
                       `🧑‍✈️ ${req.pilot_name}${employeeId}\n` +
                       `📋 ${req.request_type} Leave - ${statusBadge}\n` +
                       `📅 ${format(new Date(req.start_date), 'EEE, MMM d, yyyy')} to ${format(new Date(req.end_date), 'EEE, MMM d, yyyy')}\n` +
                       `⏱️  Duration: ${req.days_count} day${req.days_count !== 1 ? 's' : ''}\n` +
                       `📝 Reason: ${req.reason || 'No reason provided'}\n` +
                       `🗓️  Roster Period: ${req.roster_period}${requestDate}${requestMethod}\n` +
                       `📤 Submitted: ${format(new Date(req.created_at), 'MMM d, yyyy \'at\' h:mm a')}${reviewer}${reviewDate}${comments}`
              }).join('\n\n')
            ) : `${format(day.date, 'EEEE, MMMM d, yyyy')}\n\nNo leave requests for this date`

            return (
              <div
                key={index}
                className={`min-h-[80px] p-1 border-r border-b border-gray-200 last:border-r-0 relative group ${
                  !day.isCurrentMonth ? 'bg-gray-50' : ''
                } ${day.isToday ? 'bg-blue-50' : ''}`}
                title={leaveTooltip}
              >
                <div className={`text-xs font-medium mb-1 ${
                  !day.isCurrentMonth ? 'text-gray-400' :
                  day.isToday ? 'text-blue-600' : 'text-gray-900'
                }`}>
                  {format(day.date, 'd')}
                </div>

                {/* Leave indicators */}
                <div className="space-y-0.5">
                  {day.leaveRequests.slice(0, 3).map((request, idx) => {
                    const detailedTooltip = `${request.pilot_name} (${request.employee_id || 'N/A'})\n` +
                      `${request.request_type} Leave - ${request.status}\n` +
                      `${format(new Date(request.start_date), 'MMM d')} to ${format(new Date(request.end_date), 'MMM d')} (${request.days_count} days)\n` +
                      `Roster: ${request.roster_period}\n` +
                      `Reason: ${request.reason || 'No reason provided'}\n` +
                      (request.request_date ? `Request Date: ${format(new Date(request.request_date), 'MMM d, yyyy')}\n` : '') +
                      (request.request_method ? `Method: ${getRequestMethodDisplay(request.request_method)}\n` : '') +
                      `Submitted: ${format(new Date(request.created_at), 'MMM d, yyyy')}`

                    return (
                      <div
                        key={request.id}
                        className={`text-white text-xs px-1 py-0.5 rounded cursor-pointer hover:opacity-90 transition-opacity ${getLeaveTypeColor(request.request_type, request.status)}`}
                        title={detailedTooltip + '\n\n🖱️ Click to edit this request'}
                        onClick={(e) => {
                          e.stopPropagation()
                          handleEditRequest(request)
                        }}
                      >
                        {selectedPilot === 'all' ? (
                          <span className="font-medium">
                            {getLeaveTypeAbbr(request.request_type)}-{getPilotInitials(request.pilot_name)}
                          </span>
                        ) : (
                          <span className="font-medium">{getLeaveTypeAbbr(request.request_type)}</span>
                        )}
                      </div>
                    )
                  })}

                  {day.leaveRequests.length > 3 && (
                    <div className="text-xs text-gray-500 px-1">
                      +{day.leaveRequests.length - 3} more
                    </div>
                  )}
                </div>
              </div>
            )
          })}
        </div>
      </div>
    )
  }

  const renderYearView = () => {
    const months = eachMonthOfInterval({
      start: startOfYear(new Date(selectedYear, 0, 1)),
      end: endOfYear(new Date(selectedYear, 0, 1))
    })

    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {months.map(month => renderMonthView(month))}
      </div>
    )
  }

  const renderQuarterView = () => {
    // Show current quarter + next quarter for better planning
    const currentMonth = new Date().getMonth()
    const currentQuarter = Math.floor(currentMonth / 3)

    const quarterMonths = []
    for (let q = currentQuarter; q <= Math.min(currentQuarter + 1, 3); q++) {
      for (let m = 0; m < 3; m++) {
        const monthIndex = (q * 3) + m
        if (monthIndex < 12) {
          quarterMonths.push(new Date(selectedYear, monthIndex, 1))
        }
      }
    }

    return (
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {quarterMonths.map(month => renderMonthView(month))}
      </div>
    )
  }

  if (loading) {
    return (
      <div className="text-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#E4002B] mx-auto"></div>
        <p className="text-gray-600 mt-2">Loading calendar...</p>
      </div>
    )
  }

  const selectedPilotName = selectedPilot === 'all'
    ? 'All Pilots'
    : pilots.find(p => p.id === selectedPilot)?.full_name || 'Unknown'

  return (
    <div className="space-y-6">
      {/* Controls */}
      <div className="bg-white rounded-lg border border-gray-200 p-6">
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div className="flex flex-col sm:flex-row gap-4">
            {/* Year Selector */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Year</label>
              <select
                value={selectedYear}
                onChange={(e) => setSelectedYear(parseInt(e.target.value))}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#E4002B] focus:border-transparent"
              >
                {Array.from({ length: 5 }, (_, i) => new Date().getFullYear() + i - 1).map(year => (
                  <option key={year} value={year}>{year}</option>
                ))}
              </select>
            </div>

            {/* Pilot Filter */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Pilot</label>
              <select
                value={selectedPilot}
                onChange={(e) => setSelectedPilot(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#E4002B] focus:border-transparent"
              >
                <option value="all">All Pilots</option>
                {pilots.map(pilot => (
                  <option key={pilot.id} value={pilot.id}>
                    {pilot.full_name} ({pilot.employee_id})
                  </option>
                ))}
              </select>
            </div>

            {/* View Toggle */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">View</label>
              <div className="flex rounded-lg overflow-hidden border border-gray-300">
                <button
                  onClick={() => setView('quarter')}
                  className={`px-3 py-2 text-sm transition-colors ${
                    view === 'quarter'
                      ? 'bg-[#E4002B] text-white'
                      : 'bg-white text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  Quarter
                </button>
                <button
                  onClick={() => setView('year')}
                  className={`px-3 py-2 text-sm transition-colors border-l border-gray-300 ${
                    view === 'year'
                      ? 'bg-[#E4002B] text-white'
                      : 'bg-white text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  Full Year
                </button>
              </div>
            </div>
          </div>

          {/* Current Info */}
          <div className="text-right">
            <p className="text-sm text-gray-600">Current Roster: <span className="font-medium text-[#E4002B]">{currentRoster.code}</span></p>
            <p className="text-sm text-gray-600">Viewing: <span className="font-medium">{selectedPilotName}</span></p>
          </div>
        </div>
      </div>

      {/* Legend */}
      <div className="bg-white rounded-lg border border-gray-200 p-4">
        <h3 className="font-medium text-gray-900 mb-3">Legend</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <h4 className="font-medium text-sm text-gray-700 mb-2">Leave Types</h4>
            <div className="space-y-1">
              <div className="flex items-center">
                <div className="w-4 h-4 bg-blue-500 rounded mr-2"></div>
                <span className="text-sm">RDO (Rostered Day Off)</span>
              </div>
              <div className="flex items-center">
                <div className="w-4 h-4 bg-green-500 rounded mr-2"></div>
                <span className="text-sm">SDO (Substitute Day Off)</span>
              </div>
              <div className="flex items-center">
                <div className="w-4 h-4 bg-purple-500 rounded mr-2"></div>
                <span className="text-sm">ANN (Annual Leave)</span>
              </div>
              <div className="flex items-center">
                <div className="w-4 h-4 bg-red-500 rounded mr-2"></div>
                <span className="text-sm">SCK (Sick Leave)</span>
              </div>
              <div className="flex items-center">
                <div className="w-4 h-4 bg-orange-500 rounded mr-2"></div>
                <span className="text-sm">LSL (Long Service Leave)</span>
              </div>
              <div className="flex items-center">
                <div className="w-4 h-4 bg-gray-600 rounded mr-2"></div>
                <span className="text-sm">LWOP (Leave Without Pay)</span>
              </div>
            </div>
          </div>
          <div>
            <h4 className="font-medium text-sm text-gray-700 mb-2">Status</h4>
            <div className="space-y-2">
              <div className="flex items-center">
                <div className="w-4 h-4 bg-blue-500 rounded mr-2"></div>
                <span className="text-sm">Approved (solid)</span>
              </div>
              <div className="flex items-center">
                <div className="w-4 h-4 bg-blue-500 opacity-75 rounded mr-2"></div>
                <span className="text-sm">Pending (semi-transparent)</span>
              </div>
              <div className="flex items-center">
                <div className="w-4 h-4 bg-blue-500 opacity-50 rounded mr-2"></div>
                <span className="text-sm">Denied (faded)</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Calendar */}
      <div>
        {view === 'year' ? renderYearView() : renderQuarterView()}
      </div>

      {/* Statistics */}
      <div className="bg-white rounded-lg border border-gray-200 p-6">
        <h3 className="font-medium text-gray-900 mb-4">Leave Statistics for {selectedYear}</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
          {['RDO', 'SDO', 'ANNUAL', 'SICK', 'LSL', 'LWOP'].map(type => {
            const count = filteredRequests.filter(req => req.request_type === type).length
            const totalDays = filteredRequests
              .filter(req => req.request_type === type)
              .reduce((sum, req) => sum + (req.days_count || 0), 0)

            return (
              <div key={type} className="text-center">
                <div className={`w-8 h-8 ${getLeaveTypeColor(type, 'APPROVED')} rounded mx-auto mb-2 flex items-center justify-center text-white font-bold text-xs`}>
                  {getLeaveTypeAbbr(type)}
                </div>
                <p className="font-semibold text-lg">{count}</p>
                <p className="text-xs text-gray-600">requests</p>
                <p className="text-sm font-medium">{totalDays} days</p>
              </div>
            )
          })}
        </div>
      </div>

      {/* Edit Modal */}
      {showEditModal && editingRequest && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Edit Leave Request</h3>
              <button
                onClick={handleCloseEdit}
                className="text-gray-400 hover:text-gray-500"
              >
                <span className="sr-only">Close</span>
                <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Pilot: {editingRequest.pilot_name} ({editingRequest.employee_id})
                </label>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Leave Type</label>
                <select
                  value={editingRequest.request_type}
                  onChange={(e) => setEditingRequest(prev => prev ? { ...prev, request_type: e.target.value as any } : null)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#E4002B] focus:border-transparent"
                >
                  <option value="RDO">RDO - Rostered Day Off</option>
                  <option value="SDO">SDO - Substitute Day Off</option>
                  <option value="ANNUAL">Annual Leave</option>
                  <option value="SICK">Sick Leave</option>
                  <option value="LSL">Long Service Leave</option>
                  <option value="LWOP">Leave Without Pay</option>
                </select>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
                  <input
                    type="date"
                    value={editingRequest.start_date}
                    onChange={(e) => setEditingRequest(prev => prev ? { ...prev, start_date: e.target.value } : null)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#E4002B] focus:border-transparent"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">End Date</label>
                  <input
                    type="date"
                    value={editingRequest.end_date}
                    onChange={(e) => setEditingRequest(prev => prev ? { ...prev, end_date: e.target.value } : null)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#E4002B] focus:border-transparent"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Request Date</label>
                <input
                  type="date"
                  value={editingRequest.request_date || ''}
                  onChange={(e) => setEditingRequest(prev => prev ? { ...prev, request_date: e.target.value } : null)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#E4002B] focus:border-transparent"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Request Method</label>
                <select
                  value={editingRequest.request_method || 'SYSTEM'}
                  onChange={(e) => setEditingRequest(prev => prev ? { ...prev, request_method: e.target.value as any } : null)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#E4002B] focus:border-transparent"
                >
                  <option value="EMAIL">📧 Email</option>
                  <option value="ORACLE">🖥️ Oracle System</option>
                  <option value="LEAVE_BIDS">📋 Leave Bids</option>
                  <option value="SYSTEM">💻 System</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Reason</label>
                <textarea
                  value={editingRequest.reason || ''}
                  onChange={(e) => setEditingRequest(prev => prev ? { ...prev, reason: e.target.value } : null)}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#E4002B] focus:border-transparent"
                  placeholder="Enter reason for leave..."
                />
              </div>
            </div>

            <div className="flex gap-3 mt-6">
              <button
                onClick={handleCloseEdit}
                className="flex-1 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={() => handleSaveEdit(editingRequest)}
                disabled={saving}
                className="flex-1 px-4 py-2 bg-[#E4002B] text-white rounded-lg hover:bg-[#C00020] transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed flex items-center justify-center gap-2"
              >
                {saving && (
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                )}
                {saving ? 'Saving...' : 'Save Changes'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}